{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4d9a02c8",
   "metadata": {},
   "source": [
    "# Harsha Equation â€” Advanced QuTiP Notebook\n",
    "\n",
    "This notebook constructs three Harsha-model systems (two-site exciton, minimal radical-pair, and enzyme-tunneling toy), builds finite-time dynamical maps by evolving operator-basis elements under a self-consistent time-local solver, computes Choi eigenvalues (CPTP test), plots von Neumann entropy (proxy for entropy production), computes a coherent-information proxy, and reports simple stability diagnostics and a parameter-fit stub.\n",
    "\n",
    "Outputs (CSV and PNG) are saved to `./harsha_results/`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d66fb19d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# CELL 1: Self-consistent solver and diagnostics (idempotent)\n",
    "import os\n",
    "import json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import qutip as qt\n",
    "from qutip import expect\n",
    "from qutip import partial_transpose\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.linalg import sqrtm\n",
    "from scipy.optimize import minimize\n",
    "from numpy.linalg import eigvals, norm\n",
    "from qutip import operator_to_vector, vector_to_operator\n",
    "\n",
    "\n",
    "\n",
    "# Ensure OUTDIR exists (OUTDIR defined in earlier cell)\n",
    "if 'OUTDIR' not in globals():\n",
    "    OUTDIR = \"./harsha_results\"\n",
    "os.makedirs(OUTDIR, exist_ok=True)\n",
    "\n",
    "def vec_qobj(qobj):\n",
    "    return qt.operator_to_vector(qobj).full().flatten()\n",
    "\n",
    "def evolve_basis_self_consistent(H0, proj_observable, c_ops_base, tlist, lambda0=0.0, kappa=0.0):\n",
    "    \"\"\"\n",
    "    Build finite-time superoperator Phi by evolving each basis operator\n",
    "    under time-local mean-field update H(t) = H0 + (lambda0 + kappa * Tr[proj rho]) * proj_observable.\n",
    "\n",
    "    This version enforces QuTiP `dims` consistency for H0, proj_observable and c_ops.\n",
    "    It builds the operator basis explicitly with matching dims to avoid the\n",
    "    incompatible-dimensions errors.\n",
    "    \"\"\"\n",
    "    # ensure inputs are Qobj\n",
    "    if not isinstance(H0, qt.Qobj):\n",
    "        H0 = qt.Qobj(H0)\n",
    "    dims = H0.dims\n",
    "    d = H0.shape[0]\n",
    "\n",
    "    # ensure proj_observable is a Qobj with matching dims\n",
    "    if not isinstance(proj_observable, qt.Qobj):\n",
    "        proj_observable = qt.Qobj(proj_observable)\n",
    "    if proj_observable.dims != dims:\n",
    "        proj_observable = proj_observable.copy()\n",
    "        proj_observable.dims = dims\n",
    "\n",
    "    # ensure collapse operators have matching dims\n",
    "    c_ops = []\n",
    "    for L in c_ops_base:\n",
    "        if not isinstance(L, qt.Qobj):\n",
    "            Lq = qt.Qobj(L)\n",
    "        else:\n",
    "            Lq = L.copy()\n",
    "        if Lq.dims != dims:\n",
    "            Lq.dims = dims\n",
    "        c_ops.append(Lq)\n",
    "\n",
    "    # build basis operators with explicit dims (|i><j| basis)\n",
    "    basis_ops = []\n",
    "    for i in range(d):\n",
    "        for j in range(d):\n",
    "            M = np.zeros((d, d), dtype=complex)\n",
    "            M[i, j] = 1.0\n",
    "            basis_ops.append(qt.Qobj(M, dims=dims))\n",
    "\n",
    "    evolved = []\n",
    "    for B in basis_ops:\n",
    "        rho = B.copy()\n",
    "        # time-step integration with updated H at each small step\n",
    "        for idx in range(len(tlist) - 1):\n",
    "            dt = float(tlist[idx + 1] - tlist[idx])\n",
    "            # ensure rho is Qobj with right dims (safety)\n",
    "            if not isinstance(rho, qt.Qobj):\n",
    "                rho = qt.Qobj(rho, dims=dims)\n",
    "            if rho.dims != dims:\n",
    "                rho = rho.copy(); rho.dims = dims\n",
    "\n",
    "            # compute population / expectation (Tr[rho * proj])\n",
    "            try:\n",
    "                pop = (rho * proj_observable).tr()\n",
    "            except Exception:\n",
    "                # fallback: try expectation\n",
    "                pop = qt.expect(proj_observable, rho) if hasattr(qt, \"expect\") else 0.0\n",
    "\n",
    "            lam = float(lambda0 + kappa * np.real(pop))\n",
    "            Ht = H0 + lam * proj_observable\n",
    "\n",
    "            try:\n",
    "                res = qt.mesolve(Ht, rho, [0.0, dt], c_ops, e_ops=[])\n",
    "                rho = res.states[-1]\n",
    "            except Exception as e:\n",
    "                # fallback: keep rho unchanged but warn (don't crash the sweep)\n",
    "                # You can replace this with logging if you prefer.\n",
    "                # print(\"mesolve failed at small step (keeping state):\", e)\n",
    "                rho = rho\n",
    "\n",
    "        # store full matrix (as numpy array) for later vectorization\n",
    "        evolved.append(rho.full())\n",
    "\n",
    "    # assemble Phi as d^2 x d^2 (column-major mapping vec(in)->vec(out))\n",
    "    Phi = np.zeros((d * d, d * d), dtype=complex)\n",
    "    for col, mat in enumerate(evolved):\n",
    "        # create Qobj with dims so operator_to_vector uses correct dims\n",
    "        out_q = qt.Qobj(mat, dims=dims)\n",
    "        vec_out = qt.operator_to_vector(out_q).full().flatten()\n",
    "        Phi[:, col] = vec_out\n",
    "\n",
    "    return Phi\n",
    "\n",
    "\n",
    "\n",
    "def superop_to_choi(Phi, d):\n",
    "    return Phi.reshape((d,d,d,d)).transpose((0,2,1,3)).reshape((d*d,d*d))\n",
    "\n",
    "def min_choi_eigenvalue(Phi, d):\n",
    "    J = superop_to_choi(Phi, d)\n",
    "    eigs = np.linalg.eigvals(J)\n",
    "    return np.min(np.real(eigs)), eigs\n",
    "\n",
    "def entropy_trajectory(H0, proj_obs, c_ops, tlist, lambda0, kappa, rho0):\n",
    "    rho = qt.Qobj(rho0)\n",
    "    S_list = [qt.entropy_vn(rho)]\n",
    "    for idx in range(len(tlist)-1):\n",
    "        dt = tlist[idx+1]-tlist[idx]\n",
    "        pop = np.real((rho * proj_obs).tr())\n",
    "        lam = lambda0 + kappa*pop\n",
    "        Ht = H0 + lam*proj_obs\n",
    "        res = qt.mesolve(Ht, rho, [0, dt], c_ops, e_ops=[])\n",
    "        rho = res.states[-1]\n",
    "        S_list.append(qt.entropy_vn(rho))\n",
    "    return np.array(S_list)\n",
    "\n",
    "def relative_entropy(rho, sigma):\n",
    "    try:\n",
    "        return qt.entropy_relative(qt.Qobj(rho), qt.Qobj(sigma))\n",
    "    except Exception:\n",
    "        # fallback crude computation (diagonal basis)\n",
    "        r = np.real(qt.Qobj(rho).full().diagonal())\n",
    "        s = np.real(qt.Qobj(sigma).full().diagonal())\n",
    "        mask = r > 1e-12\n",
    "        eps = 1e-12\n",
    "        return np.sum(r[mask] * (np.log(r[mask]) - np.log(np.maximum(s[mask], eps))))\n",
    "\n",
    "def entropy_production_proxy(H0, proj_obs, c_ops, tlist, lambda0, kappa, rho0, rho_inst_fn=None):\n",
    "    rho = qt.Qobj(rho0)\n",
    "    rho_list = [rho]\n",
    "    for idx in range(len(tlist)-1):\n",
    "        dt = tlist[idx+1]-tlist[idx]\n",
    "        pop = np.real((rho * proj_obs).tr())\n",
    "        lam = lambda0 + kappa*pop\n",
    "        Ht = H0 + lam*proj_obs\n",
    "        res = qt.mesolve(Ht, rho, [0, dt], c_ops, e_ops=[])\n",
    "        rho = res.states[-1]\n",
    "        rho_list.append(rho)\n",
    "    # build instantaneous reference states\n",
    "    if rho_inst_fn is None:\n",
    "        try:\n",
    "            ss = qt.steadystate(H0, c_ops)\n",
    "            rho_inst = [ss]*len(rho_list)\n",
    "        except Exception:\n",
    "            rho_inst = [rho_list[0]]*len(rho_list)\n",
    "    else:\n",
    "        rho_inst = [rho_inst_fn(t) for t in np.linspace(0,1,len(rho_list))]\n",
    "    Srel = np.array([relative_entropy(rho_list[i], rho_inst[i]) for i in range(len(rho_list))])\n",
    "    times = np.linspace(0,1,len(rho_list))\n",
    "    dS = -np.diff(Srel) / np.diff(times)\n",
    "    return times[1:], dS\n",
    "\n",
    "def coherent_information_proxy(Phi, d, samples=100):\n",
    "    best = 1e9\n",
    "    for _ in range(samples):\n",
    "        psi = qt.rand_ket(d)\n",
    "        rho = psi * psi.dag()\n",
    "\n",
    "        # vectorize input operator\n",
    "        rho_vec = qt.operator_to_vector(rho)\n",
    "\n",
    "        # apply channel superoperator\n",
    "        out_vec = Phi.dot(rho_vec.full().flatten())\n",
    "\n",
    "        # reconstruct as operator-ket Qobj with correct dims\n",
    "        out_vec_qobj = qt.Qobj(out_vec.reshape((d*d, 1)),\n",
    "                               dims=[[[d],[d]], [1,1]],\n",
    "                               superrep=\"super\")\n",
    "\n",
    "        # map back to operator\n",
    "        out = qt.vector_to_operator(out_vec_qobj)\n",
    "\n",
    "        # entropy of output\n",
    "        S_out = qt.entropy_vn(out)\n",
    "        if S_out < best:\n",
    "            best = S_out\n",
    "    return -best\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def spectral_gap_of_lindbladian(H, c_ops):\n",
    "    L = qt.liouvillian(H, c_ops)\n",
    "    eigs = eigvals(L.full())\n",
    "    desc = np.sort(np.real(eigs))[::-1]\n",
    "    if len(desc) > 1:\n",
    "        gap = desc[0] - desc[1]\n",
    "    else:\n",
    "        gap = 0.0\n",
    "    return gap, eigs\n",
    "\n",
    "def fit_kappa_from_observables(H0, proj_obs, c_ops_base, tlist, rho0, measured_eta_t, kappa_init=0.1):\n",
    "    def loss(kappa_arr):\n",
    "        k = float(kappa_arr[0])\n",
    "        rho = qt.Qobj(rho0)\n",
    "        eta_model = []\n",
    "        for idx in range(len(tlist)-1):\n",
    "            dt = tlist[idx+1] - tlist[idx]\n",
    "            pop = np.real((rho * proj_obs).tr())\n",
    "            lam = 0.0 + k * pop\n",
    "            Ht = H0 + lam * proj_obs\n",
    "            res = qt.mesolve(Ht, rho, [0, dt], c_ops_base, e_ops=[])\n",
    "            rho = res.states[-1]\n",
    "            eta_model.append(np.real((rho * proj_obs).tr()))\n",
    "        eta_model = np.array(eta_model)\n",
    "        measured = np.array(measured_eta_t)[:len(eta_model)]\n",
    "        return np.sum((eta_model - measured)**2)\n",
    "    res = minimize(lambda x: loss(x), x0=[kappa_init], bounds=[(0,5)])\n",
    "    return res\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "05b03e9b-11e8-46b6-8551-59b298562720",
   "metadata": {},
   "outputs": [],
   "source": [
    "# CELL: Model builders (needed by later cells)\n",
    "\n",
    "def build_two_site(eps1=0.0, eps2=0.1, J=0.05):\n",
    "    d = 2\n",
    "    proj1 = qt.basis(d,0)*qt.basis(d,0).dag()\n",
    "    proj2 = qt.basis(d,1)*qt.basis(d,1).dag()\n",
    "    H0 = eps1*proj1 + eps2*proj2 + J*(qt.basis(d,0)*qt.basis(d,1).dag() + qt.basis(d,1)*qt.basis(d,0).dag())\n",
    "    return {'d':d, 'proj1':proj1, 'proj2':proj2, 'H0':H0}\n",
    "\n",
    "def build_radical_pair_minimal(B=0.01, J_ex=0.02):\n",
    "    sx = qt.sigmax(); sy = qt.sigmay(); sz = qt.sigmaz()\n",
    "    id2 = qt.qeye(2)\n",
    "\n",
    "    # single-spin ops in tensor space\n",
    "    sx1 = qt.tensor(sx, id2); sy1 = qt.tensor(sy, id2); sz1 = qt.tensor(sz, id2)\n",
    "    sx2 = qt.tensor(id2, sx); sy2 = qt.tensor(id2, sy); sz2 = qt.tensor(id2, sz)\n",
    "\n",
    "    # Hamiltonian\n",
    "    H_Z = B * (sz1 + sz2)\n",
    "    H_ex = J_ex * (sx1*sx2 + sy1*sy2 + sz1*sz2)\n",
    "    H0 = H_Z + H_ex\n",
    "\n",
    "    # singlet projector\n",
    "    up = qt.basis(2,0); dn = qt.basis(2,1)\n",
    "    sing = (qt.tensor(up,dn) - qt.tensor(dn,up)).unit()\n",
    "    P_S = sing * sing.dag()\n",
    "    P_S.dims = [[2,2],[2,2]]   # <-- force dims match tensor space\n",
    "\n",
    "    # triplet projector\n",
    "    P_T = qt.qeye([2,2]) - P_S\n",
    "\n",
    "    return {'d':4, 'H0':H0, 'P_S':P_S, 'P_T':P_T}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def build_enzyme_tunneling(epsA=0.0, epsB=0.2, J=0.01):\n",
    "    d = 3\n",
    "    e0 = qt.basis(d,0)*qt.basis(d,0).dag()\n",
    "    e1 = qt.basis(d,1)*qt.basis(d,1).dag()\n",
    "    e2 = qt.basis(d,2)*qt.basis(d,2).dag()\n",
    "    H0 = epsA*e0 + epsB*e1 + J*(qt.basis(d,0)*qt.basis(d,1).dag() + qt.basis(d,1)*qt.basis(d,0).dag())\n",
    "    return {'d':d, 'proj_donor':e0, 'proj_acceptor':e1, 'proj_product':e2, 'H0':H0}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "773a60ae-6a6c-4c8d-b24e-93f151b51542",
   "metadata": {},
   "outputs": [],
   "source": [
    "# CELL - log-negativity & concurrence\n",
    "\n",
    "def logarithmic_negativity(rho, sys_dims, subsystem=0):\n",
    "    \"\"\"\n",
    "    Compute logarithmic negativity of rho with respect to a bipartition.\n",
    "    - rho: Qobj density matrix (composite)\n",
    "    - sys_dims: list of dimensions of each subsystem (e.g., [d_sys, d_mode])\n",
    "    - subsystem: which subsystem index to partial transpose (0, 1, ...)\n",
    "    Returns: float (log2 ||rho^{T_sub}||_1)\n",
    "    \"\"\"\n",
    "    # Build binary mask for partial transpose\n",
    "    mask = [0] * len(sys_dims)\n",
    "    mask[subsystem] = 1\n",
    "\n",
    "    # Partial transpose\n",
    "    rho_pt = partial_transpose(rho, mask)\n",
    "\n",
    "    # Convert to numpy and compute trace norm\n",
    "    mat = rho_pt.full()\n",
    "    s = np.linalg.svd(mat, compute_uv=False)  # singular values\n",
    "    trace_norm = np.sum(s)\n",
    "\n",
    "    # Logarithmic negativity\n",
    "    return np.log2(trace_norm)\n",
    "\n",
    "def concurrence_two_qubit(rho):\n",
    "    \"\"\"\n",
    "    Compute concurrence for a two-qubit density matrix rho (Qobj).\n",
    "    Implements Wootters' formula.\n",
    "    \"\"\"\n",
    "    # Ensure density matrix numpy array\n",
    "    rho_mat = rho.full()\n",
    "    # Pauli-Y\n",
    "    sy = np.array([[0, -1j], [1j, 0]], dtype=complex)\n",
    "    YY = np.kron(sy, sy)\n",
    "    rho_star = np.conjugate(rho_mat)\n",
    "    R = rho_mat @ YY @ rho_star @ YY\n",
    "    # eigenvalues of R (non-negative real in ideal)\n",
    "    vals = np.real(np.linalg.eigvals(R))\n",
    "    # numerical rounding and sort descending\n",
    "    vals = np.sort(np.clip(vals, 0, None))[::-1]\n",
    "    # square roots\n",
    "    roots = np.sqrt(vals)\n",
    "    conc = max(0.0, roots[0] - roots[1] - roots[2] - roots[3])\n",
    "    return float(np.real(conc))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "222d26a2-50b9-4eb6-a30e-7fc2986f6882",
   "metadata": {},
   "outputs": [],
   "source": [
    "# CELL - build finite-time map & Choi test\n",
    "def build_finite_time_map(H_func, c_ops, d, tlist, solver=qt.mesolve, **solver_kwargs):\n",
    "    \"\"\"\n",
    "    Build finite-time superoperator Phi(t_final, 0) by evolving operator basis.\n",
    "    - H_func: Hamiltonian (Qobj) or time-dependent function accepted by mesolve\n",
    "    - c_ops: list of collapse operators (Qobj)\n",
    "    - d: system dimension\n",
    "    - tlist: array-like times (we use result at last time)\n",
    "    Returns:\n",
    "      - Phi: (d^2, d^2) numpy array superoperator acting on vectorized density matrices\n",
    "    \"\"\"\n",
    "    basis_ops = [qt.basis(d, i) * qt.basis(d, j).dag()\n",
    "                 for i in range(d) for j in range(d)]\n",
    "    evolved = []\n",
    "    tlist = np.array(tlist)\n",
    "\n",
    "    for B in basis_ops:\n",
    "        # evolve B as operator (not necessarily a density matrix)\n",
    "        result = solver(H_func, B, tlist, c_ops, e_ops=[])\n",
    "        rho_t = result.states[-1]  # final operator at t_final\n",
    "        vec_out = qt.operator_to_vector(rho_t).full().flatten()\n",
    "        evolved.append(vec_out)\n",
    "\n",
    "    Phi = np.column_stack(evolved)\n",
    "    return Phi\n",
    "\n",
    "\n",
    "def choi_from_superop(Phi, d):\n",
    "    \"\"\"\n",
    "    Construct Choi matrix from superoperator Phi (d^2 x d^2).\n",
    "    \"\"\"\n",
    "    J = np.zeros((d*d, d*d), dtype=complex)\n",
    "    for i in range(d):\n",
    "        for j in range(d):\n",
    "            Eij = np.zeros((d, d), dtype=complex)\n",
    "            Eij[i, j] = 1.0\n",
    "            eij_vec = operator_to_vector(qt.Qobj(Eij, dims=[[d], [d]])).full().flatten()\n",
    "            J += np.outer(Phi @ eij_vec, eij_vec.conj())\n",
    "    return J.reshape((d*d, d*d))\n",
    "\n",
    "\n",
    "def cptp_check_from_choi(J, atol=1e-8):\n",
    "    \"\"\"\n",
    "    Check CPTP from Choi:\n",
    "    - Positivity: eigenvalues >= -atol\n",
    "    - Trace-preserving: Tr1[J] == I (within tol)\n",
    "    Returns (is_cptp, details)\n",
    "    \"\"\"\n",
    "    # eigenvalue positivity (complete positivity check)\n",
    "    eigs = np.linalg.eigvals(J)\n",
    "    min_eig = np.min(np.real(eigs))\n",
    "    pos_ok = min_eig >= -atol\n",
    "\n",
    "    # infer system dimension d from J.shape\n",
    "    d2 = J.shape[0]\n",
    "    d = int(np.sqrt(d2))   # <- only one sqrt, not two\n",
    "    if d*d != d2:\n",
    "        raise ValueError(f\"Choi has inconsistent dimension: shape {J.shape}\")\n",
    "\n",
    "    # partial trace over input (first subsystem)\n",
    "    J4 = J.reshape((d, d, d, d)).transpose((0, 2, 1, 3))\n",
    "    tr1 = np.trace(J4, axis1=0, axis2=2)  # yields d x d matrix\n",
    "    I = np.eye(d)\n",
    "    tp_ok = np.allclose(tr1, I, atol=1e-6, rtol=1e-6)\n",
    "\n",
    "    return pos_ok and tp_ok, {\n",
    "        \"min_eig\": float(min_eig),\n",
    "        \"trace1_diff_max\": float(np.max(np.abs(tr1 - I))),\n",
    "        \"pos_ok\": bool(pos_ok),\n",
    "        \"tp_ok\": bool(tp_ok)\n",
    "    }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a7eb196-ec9d-41b3-afe4-a3938440a39a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# CELL: vibronic_model.py - two-site + single mode to probe system-environment correlations\n",
    "\n",
    "def build_two_site_single_mode(J=0.1, eps1=0.0, eps2=0.2, g=0.05, omega=1.0, Nmode=12):\n",
    "    \"\"\"\n",
    "    Builds a composite Hamiltonian:\n",
    "      H_sys = eps1 |1><1| + eps2 |2><2| + J(|1><2| + h.c.)\n",
    "      H_mode = omega a^â€  a\n",
    "      H_coup = g (|1><1|-|2><2|) âŠ— (a + a^â€ )   # difference coupling for sensitivity\n",
    "    Returns:\n",
    "      - H (Qobj, composite), sys operators and mode operators for diagnostics,\n",
    "      - dims (sys_dims) for partial transpose and slicing\n",
    "    \"\"\"\n",
    "    # system (two-level) basis\n",
    "    d_sys = 2\n",
    "    # Pauli/projectors in system space\n",
    "    proj1 = qt.basis(d_sys,0)*qt.basis(d_sys,0).dag()\n",
    "    proj2 = qt.basis(d_sys,1)*qt.basis(d_sys,1).dag()\n",
    "    sx = qt.sigmax()\n",
    "    sys_H = eps1*proj1 + eps2*proj2 + J*(qt.tensor(qt.sigmax(), qt.qeye(1)).ptrace(0) if False else J*sx)  # simpler J*sx works for two-level mapping\n",
    "    # Mode\n",
    "    a = qt.destroy(Nmode)\n",
    "    mode_H = omega * qt.tensor(qt.qeye(d_sys), a.dag()*a)\n",
    "    # System Hamiltonian as composite\n",
    "    sys_H_comp = eps1 * qt.tensor(proj1, qt.qeye(Nmode)) + eps2 * qt.tensor(proj2, qt.qeye(Nmode)) + J * qt.tensor(sx, qt.qeye(Nmode))\n",
    "    # Coupling\n",
    "    coupling = g * qt.tensor(proj1 - proj2, (a + a.dag()))\n",
    "    H = sys_H_comp + mode_H + coupling\n",
    "    # Diagnostics operators\n",
    "    pop1 = qt.tensor(proj1, qt.qeye(Nmode))\n",
    "    pop2 = qt.tensor(proj2, qt.qeye(Nmode))\n",
    "    mode_x = qt.tensor(qt.qeye(d_sys), (a + a.dag()))\n",
    "    mode_n = qt.tensor(qt.qeye(d_sys), a.dag()*a)\n",
    "    dims = [d_sys, Nmode]\n",
    "    return {\"H\": H, \"pop1\": pop1, \"pop2\": pop2, \"mode_x\": mode_x, \"mode_n\": mode_n, \"dims\": dims, \"a\": a}\n",
    "\n",
    "def mode_quadrature_kurtosis(rho, mode_index=1, trunc_N=None):\n",
    "    \"\"\"\n",
    "    Compute kurtosis of the mode quadrature X = a + a^â€  for the reduced mode state.\n",
    "    Kurtosis = E[(X - mu)^4] / (E[(X - mu)^2]^2) - 3  (excess kurtosis)\n",
    "    \"\"\"\n",
    "    # assume rho is composite; reduce to mode\n",
    "    rho_mode = rho.ptrace(mode_index)\n",
    "    a = qt.destroy(rho_mode.shape[0])\n",
    "    X = a + a.dag()\n",
    "    mu = qt.expect(X, rho_mode)\n",
    "    m2 = qt.expect(X**2, rho_mode) - mu**2\n",
    "    m4 = qt.expect((X - mu)**4, rho_mode)\n",
    "    if m2 == 0:\n",
    "        return 0.0\n",
    "    kurt = m4 / (m2**2) - 3.0\n",
    "    return float(kurt)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "528d6bc5-9167-48aa-8795-aabf47a95cf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxUAAAJQCAYAAAD4/0lhAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjMsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvZiW1igAAAAlwSFlzAAAPYQAAD2EBqD+naQAAr4lJREFUeJzs3Qd4U1UbB/B/9x50sPfee28URYaCOABB5icuUAGVoYg4QEU2CKICoiIIIqIgiMiQvTeUTZktZbSle+R73pMmpKU7bW+S/n+P19zcrJM0tOe97znvsdPpdDoQERERERHlkn1uH0hERERERCQYVBARERERkVkYVBARERERkVkYVBARERERkVkYVBARERERkVkYVBARERERkVkYVBARERERkVkYVBARERERkVkYVBARERERkVkYVBBZmcWLF8POzg6XLl0yHitfvjy6desGSyLtk3ZKe23JlStX4Orqih07dhiPtW/fHrVr19a0XYVF8+bN8e6775r1HPLzki2/nD17Fo8//jh8fHzUv4HVq1en++82r9nqvzkisg4MKog09tRTT8Hd3R2RkZEZ3qdv375wdnbG7du3C7Rt9LCPPvoIzZo1Q6tWrbRuisVZs2YNGjZsqIKusmXLYsKECUhMTMx2Zzi9bdmyZanuO3r0aMydOxc3b96EpRowYACOHTuGTz/9FD/88AMaN24Ma3Tt2jU8//zz8PX1hbe3N7p3744LFy5k67F///03hgwZooJtBwcHdeIjI/I5ye/BYsWKqZ/5hx9+mO79Vq1ahV69eqFixYrqd2a1atUwatQo3Lt3L9fvkYjyjmMePhcR5YIEDH/88Qd+++039O/f/6Hbo6Oj8fvvv+OJJ56Av78/XnzxRfTu3RsuLi6wZOXKlUNMTAycnJxgK27duoXvv/9ebZTaX3/9hR49eqgMwOzZs1Wn+pNPPkFoaCjmzZuXrefo06cPunTpkupYixYtUl2Xjq10cL/66isV4Fka+c7v2rUL7733HoYNG2Y8bi3/bg3u37+PDh06IDw8HOPGjVP/jqdPn4527drh8OHD6ndRZpYuXYrly5erILNkyZKZ3vf9999H8eLF0aBBA2zYsCHD+w0dOlQ9V79+/VTQKt+xOXPmYN26dTh48CDc3Nxy/X6JyHwMKog0JmfovLy81B/h9IIKCSiioqJU8CHkrJ9seUWe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607LfF4ZliTBSLVq1XDs2DF1XbIYEkxIcNCyZUt1359++kndXzITzz33nDomo3ykyFCzZs2MQYoUN5IgRYoUacViSsrKBxITE/PQcTkmkRgRERERkbVr3rx5quyGzO2V7IRkIxwdHY3BgpAVwyXwOHXqlPGY3KdJkybG69WrV1dDokzvUygzFREREcbF7mRFbRkbZroM+7p169SK10RERERE6Q1BkoyBVq9NFhJUSGQl0ZpssrJ1WnJ84sSJmrSNiIiIiCyb9BVzOgRJS3v27El1XSqQyqTrmjVrIjExUd1uGP50+/ZtBAUFqdsM5D4yF8Mw1Eluv3fvnhoCpSXNfwIyQVuyFI888gh+/fVX+Pn5GW+TySflypVDyZIlNW0jEREREVFeCA4OVkspvPzyyzh48CBmz56NqVOnqsCie/fuasL2119/reYZjxkzRq2hJscNZMK2zDeeNWuWGgollaRkSJXpfIrDhw+ry/v376v12+S69KtNgxObCyratWunLi9evKgmopguTEdEREREZEv69++v5gxLEODg4KAWXZYKUGLRokXqerdu3RAfH4+2bduqqQCGyk9CSs1KVagXXngB165dQ5s2bfDdd9+leo0GDRoY9w8cOIClS5eqE/WXLl2y3aDCQN6ooUyWRHDyQZqS1a6JiIiIiKyZk5OTWuF63rx5D90m61Nkp0BRz5491ZYRw7oXBcliggpJzQwaNAh//fVXurfLpG0iIiIiIrI8FjPW6K233lKTTGRyipubG9avX6/KzMr4MqnZS0RERERElsliMhX//vsvfv/9dzRu3FjNq5DhUI899phaTXDy5Mno2rWr1k0kIiIiIsq1LVu2mPV4WXFbNktkMZkKWTnbsB6FjCeT4VCiTp06amY8ERERERFZJosJKmS1QKmzK+rVq6dKacmM9vnz56NEiRJaN4+IiIiIiCx9+JOUz7px44banzBhAp544gn89NNPqqbu4sWLtW4eERERERFZelDRr18/436jRo1w+fJlnD59GmXLlkVAQICmbSMiIiIiIisIKtKShT0aNmyodTOIiIiIiMiSgwpZojy7pk2blq9tISIiIiIiKwwqDh06lK372dnZ5XtbiIiIiIjICoOKzZs3a/nyREREREQ2ZdWqVZg3bx4OHz6MuLg41KpVCx9++CE6depUOErKEhERERGRebZt26YW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6pydnXVNmzbV7d69W+smWYXNmzdLKeWHtgEDBmjdNIuX3ucm26JFi7RumsUbPHiwrly5curfa2BgoO7RRx/V/f3331o3y2q1a9dO9+abb2rdDKvQq1cvXYkSJdR3r1SpUur6uXPntG6W1fjjjz90tWvX1rm4uOiqV6+uW7BggdZNsiobNmxQfyeCgoK0bopViYiIUL/jpJ/n6uqqq1ixou69997TxcXF6SwR16kgIiIiIiKzcE4FERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZhUEFERERERGZxdG8h5NITk7G9evX4eXlBTs7O62bQ0RERESUJ3Q6HSIjI1GyZEnY22ecj2BQkQckoChTpozWzSAiIiIiyhdXrlxB6dKlM7ydQUUekAyF4cP29vbWujlERERERHkiIiJCnTw39HczwqAiDxiGPElAwaCCiIiIiGxNVkP8OVGbiIiIiIjMwqCCiIiIiIjMwqCCiIiIiIjMwqCCiIiIiIjMwqCCiIiIiIjMwqCCiIiIiIjMwpKyRERElCvJyTrEJCQhISkZ8UnJSEjSwdHeDt6uTnB1ss+yBCUR2Q4GFURERJSp0IhYHLsWrraLYVG4cS8W18NjEBIRqwKJ9Dg56IOLot6uqBjggYqB+q1GCW9ULeoFe3sGHES2hEEFERERpRIaGYutQbewJegW9l++g5CIuCwfI0kJZwd7JCbrkJSsU8HG7ah4tZ26EZHqvt6ujmhc3g+NyxdBm8qBqF3Km1kNIitnp9Pp0j/FQDlavtzHxwfh4eFcUZuIiKzStXsx+O3gVWw4EaIyEqYkqVAp0BN1SvmganEvlPR1Q0kfV5TwdUMRdycVTDg66KdpSrciOj4J4TEJart+LwYXbkXhQlgUzt+6j+PXwtXtpkr5uqFTreJ4onZxNCpXBA7MYhBZXT+XQUUeYFBBRETWKDYhCeuP38TKA1ex43wYTHsEdUv7oH21omhdOUBlEtyd82ZwQ2JSMk7eiMC+S3ex58JtbD8XlirIkGClT9Oy6NWkjBo6RUTaYlBRgBhUEBGRNbkTFY8luy7h+52XcDc6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",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved CSV: ./harsha_results\\vibronic_run.csv\n",
      "Saved PNG: ./harsha_results\\vibronic_run_summary.png\n",
      "Final log-negativity (sys|mode): 0.11204879092685338\n"
     ]
    }
   ],
   "source": [
    "# CELL - predictor-corrector style integrator (coarse-grained)\n",
    "\n",
    "def self_consistent_evolve(H_base, O_bio, lambda_fn, lambda_update_fn, c_ops, rho0, tlist, dt=0.01, max_iter_inner=3):\n",
    "    \"\"\"\n",
    "    Evolve rho with H(t) = H_base + lambda(t)*O_bio.\n",
    "    - lambda_fn: initial function or scalar lambda(0)\n",
    "    - lambda_update_fn(rho, lambda_prev) -> new_lambda (user-defined feedback)\n",
    "    This does coarse time-stepping: for each time step:\n",
    "      - predict lambda(t) using previous value\n",
    "      - evolve for dt with mesolve using that H\n",
    "      - recompute lambda from final rho and optionally do a corrector pass\n",
    "    Returns times, states list\n",
    "    \"\"\"\n",
    "    states = []\n",
    "    rho = rho0\n",
    "    lam = float(lambda_fn if np.isscalar(lambda_fn) else lambda_fn(0))\n",
    "    times = [tlist[0]]\n",
    "    states.append(rho)\n",
    "    t = tlist[0]\n",
    "    for t_next in tlist[1:]:\n",
    "        # split into internal steps of size dt\n",
    "        nsteps = max(1, int(np.ceil((t_next - t)/dt)))\n",
    "        for _ in range(nsteps):\n",
    "            # predictor H\n",
    "            H_pred = (H_base + lam * O_bio)\n",
    "            tsub = [0.0, min(dt, t_next-t)]\n",
    "            # evolve using mesolve starting from rho (we use operator form)\n",
    "            result = qt.mesolve(H_pred, rho, tsub, c_ops, e_ops=[])\n",
    "            rho_pred = result.states[-1]\n",
    "            # correct: recompute lambda from rho_pred\n",
    "            lam_new = lambda_update_fn(rho_pred, lam)\n",
    "            # simple corrector: average\n",
    "            lam = 0.5*(lam + lam_new)\n",
    "            # re-evolve small step using corrected lam\n",
    "            H_corr = (H_base + lam * O_bio)\n",
    "            result2 = qt.mesolve(H_corr, rho, [0.0, tsub[-1]], c_ops, e_ops=[])\n",
    "            rho = result2.states[-1]\n",
    "            t = t + tsub[-1]\n",
    "        times.append(t)\n",
    "        states.append(rho)\n",
    "    return np.array(times), states\n",
    "\n",
    "# Example runner: two-site exciton + simple feedback H_bio = lambda * proj1\n",
    "def run_example_two_site_with_mode():\n",
    "    # Build vibronic model\n",
    "    model = build_two_site_single_mode(J=0.08, eps1=0.0, eps2=0.15, g=0.06, omega=1.2, Nmode=10)\n",
    "    H_full = model[\"H\"]\n",
    "    pop1 = model[\"pop1\"]\n",
    "    pop2 = model[\"pop2\"]\n",
    "    mode_x = model[\"mode_x\"]\n",
    "    dims = model[\"dims\"]\n",
    "    d_sys = dims[0]\n",
    "    d = d_sys * dims[1]\n",
    "    # Example collapse: mode damping (to mimic environment relaxation)\n",
    "    k_mode = 0.02\n",
    "    c_ops = [np.sqrt(k_mode) * qt.tensor(qt.qeye(d_sys), model[\"a\"])]\n",
    "    # Base H (exclude H_bio part). For demonstration assume O_bio = pop1 (occupation-dependent energy shift)\n",
    "    # Extract H_base by removing the projector coupling if present â€” but simpler: set H_base = H_full - lam0*pop1\n",
    "    lam0 = 0.0\n",
    "    O_bio = pop1\n",
    "    H_base = H_full - lam0 * O_bio\n",
    "    # initial state: system excited at site 1 and mode vacuum\n",
    "    rho0_sys = qt.basis(d_sys, 0) * qt.basis(d_sys,0).dag()\n",
    "    rho0_mode = qt.basis(dims[1], 0) * qt.basis(dims[1], 0).dag()\n",
    "    rho0 = qt.tensor(rho0_sys, rho0_mode)\n",
    "    # define lambda feedback: lambda(t) = lambda0 + kappa * Tr[O_bio rho(t)]\n",
    "    lambda0 = 0.0\n",
    "    kappa = 0.5\n",
    "    def lambda_update_fn(rho, lam_prev):\n",
    "        val = float(np.real_if_close((rho * O_bio).tr()))\n",
    "        return lambda0 + kappa * val\n",
    "\n",
    "    # times\n",
    "    tlist = np.linspace(0, 8.0, 161)\n",
    "    times, states = self_consistent_evolve(H_base, O_bio, lam0, lambda_update_fn, c_ops, rho0, tlist, dt=0.05)\n",
    "    # diagnostics: population, mode quadrature avg, kurtosis, log-neg of system+ancilla (we will compute sys-mode entanglement)\n",
    "    pops1 = [expect(pop1, s) for s in states]\n",
    "    pops2 = [expect(pop2, s) for s in states]\n",
    "    mode_x_exp = [expect(mode_x, s) for s in states]\n",
    "    mode_kurt = [mode_quadrature_kurtosis(s, mode_index=1) for s in states]\n",
    "    # compute log-negativity between system and mode at final time\n",
    "    final_rho = states[-1]\n",
    "    ln_final = logarithmic_negativity(final_rho, sys_dims=dims, subsystem=0)  # partial transpose system (index 0)\n",
    "    # assemble dataframe\n",
    "    df = pd.DataFrame({\n",
    "        \"t\": times,\n",
    "        \"pop1\": pops1,\n",
    "        \"pop2\": pops2,\n",
    "        \"mode_x\": mode_x_exp,\n",
    "        \"mode_kurtosis\": mode_kurt\n",
    "    })\n",
    "    # Save CSV and PNG summary\n",
    "    csv_path = os.path.join(OUTDIR, \"vibronic_run.csv\")\n",
    "    df.to_csv(csv_path, index=False)\n",
    "    # quick plots\n",
    "    fig, ax = plt.subplots(2,1, figsize=(8,6), tight_layout=True)\n",
    "    ax[0].plot(times, pops1, label=\"pop1\")\n",
    "    ax[0].plot(times, pops2, label=\"pop2\")\n",
    "    ax[0].set_ylabel(\"Population\")\n",
    "    ax[0].legend()\n",
    "    ax[1].plot(times, mode_x_exp, label=\"mode <X>\")\n",
    "    ax[1].plot(times, mode_kurt, label=\"mode kurtosis (excess)\")\n",
    "    ax[1].set_ylabel(\"Mode metrics\")\n",
    "    ax[1].legend()\n",
    "    png_path = os.path.join(OUTDIR, \"vibronic_run_summary.png\")\n",
    "    fig.suptitle(f\"Vibronic run (kappa={kappa})  ln_final={ln_final:.3f}\")\n",
    "    fig.savefig(png_path, dpi=200)\n",
    "    plt.show()\n",
    "    return {\"df\": df, \"ln_final\": ln_final, \"csv\": csv_path, \"png\": png_path}\n",
    "\n",
    "# run the example\n",
    "res = run_example_two_site_with_mode()\n",
    "print(\"Saved CSV:\", res[\"csv\"])\n",
    "print(\"Saved PNG:\", res[\"png\"])\n",
    "print(\"Final log-negativity (sys|mode):\", res[\"ln_final\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a966eaad-b3e3-4a2a-a900-b8db62610503",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPTP check: False {'min_eig': -0.9277436633152899, 'trace1_diff_max': 0.0, 'pos_ok': False, 'tp_ok': True}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(np.False_,\n",
       " {'min_eig': -0.9277436633152899,\n",
       "  'trace1_diff_max': 0.0,\n",
       "  'pos_ok': False,\n",
       "  'tp_ok': True})"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# CELL- compute finite-time Choi + CPTP check for a 2-level Harsha example\n",
    "\n",
    "def choi_demo_two_level():\n",
    "    # simple two-level sample: H = 0.5 * sz + lambda * proj1 with measurement-feedback absent here\n",
    "    d = 2\n",
    "    sz = qt.sigmaz()\n",
    "    proj1 = qt.basis(d,0) * qt.basis(d,0).dag()\n",
    "    H0 = 0.5 * sz\n",
    "    # define simple H_bio(t) function to be constant for this test (can be time dependent)\n",
    "    H_func = H0  # mesolve accepts Qobj as time-independent H\n",
    "    gamma = 0.15\n",
    "    c_ops = [np.sqrt(gamma) * qt.sigmam()]\n",
    "    tlist = np.linspace(0, 1.0, 201)\n",
    "    Phi = build_finite_time_map(H_func, c_ops, d, tlist, solver=qt.mesolve)\n",
    "    J = choi_from_superop(Phi, d)\n",
    "    ok, details = cptp_check_from_choi(J)\n",
    "    print(\"CPTP check:\", ok, details)\n",
    "    return ok, details\n",
    "\n",
    "choi_demo_two_level()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2058725e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved two-site CSV: ./harsha_results\\two_site_scan.csv\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved entropy plot.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved Choi heatmap.\n"
     ]
    }
   ],
   "source": [
    "# CELL Two-site parameter sweep (kappa x gamma), saves CSV + plots\n",
    "tlist = np.linspace(0,1.0,120)\n",
    "two = build_two_site()\n",
    "d = two['d']; proj1 = two['proj1']; H0 = two['H0']\n",
    "\n",
    "kappas = [0.0, 0.2, 0.5]\n",
    "gammas = [0.02, 0.05, 0.1]\n",
    "\n",
    "rows = []\n",
    "for kappa in kappas:\n",
    "    for gamma in gammas:\n",
    "        c_ops = [np.sqrt(gamma) * qt.sigmam()]\n",
    "        Phi = evolve_basis_self_consistent(H0, proj1, c_ops, tlist, lambda0=0.0, kappa=kappa)\n",
    "        min_eig, eigs = min_choi_eigenvalue(Phi, d)\n",
    "        coh_proxy = coherent_information_proxy(Phi, d, samples=48)\n",
    "        S_traj = entropy_trajectory(H0, proj1, c_ops, tlist, 0.0, kappa, proj1)\n",
    "        rows.append({\n",
    "            'system':'two-site','kappa':kappa,'gamma':gamma,\n",
    "            'min_choi_eig':float(min_eig),'coh_proxy':float(coh_proxy),\n",
    "            'entropy_final':float(S_traj[-1])\n",
    "        })\n",
    "\n",
    "df_two = pd.DataFrame(rows)\n",
    "two_csv = os.path.join(OUTDIR,'two_site_scan.csv')\n",
    "df_two.to_csv(two_csv, index=False)\n",
    "print(\"Saved two-site CSV:\", two_csv)\n",
    "\n",
    "# example entropy plot (middle case)\n",
    "example = rows[len(rows)//2]\n",
    "k_example = example['kappa']; g_example = example['gamma']\n",
    "c_ops = [np.sqrt(g_example) * qt.sigmam()]\n",
    "S_traj = entropy_trajectory(H0, proj1, c_ops, tlist, 0.0, k_example, proj1)\n",
    "plt.figure(figsize=(6,3))\n",
    "plt.plot(tlist, S_traj, lw=2)\n",
    "plt.xlabel('Time'); plt.ylabel('Von Neumann entropy S(t)')\n",
    "plt.title(f'Two-site entropy vs time (kappa={k_example}, gamma={g_example})')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.savefig(os.path.join(OUTDIR,'two_site_entropy_example.png'))\n",
    "plt.show() \n",
    "print(\"Saved entropy plot.\")\n",
    "# Choi heatmap\n",
    "pivot = df_two.pivot(index='gamma', columns='kappa', values='min_choi_eig')\n",
    "plt.figure(figsize=(4,3))\n",
    "plt.imshow(pivot.values, aspect='auto', origin='lower')\n",
    "plt.colorbar(label='min Choi eigenvalue')\n",
    "plt.xlabel('kappa'); plt.ylabel('gamma')\n",
    "plt.xticks(range(len(pivot.columns)), [f'{v:.2f}' for v in pivot.columns])\n",
    "plt.yticks(range(len(pivot.index)), [f'{v:.3f}' for v in pivot.index])\n",
    "plt.title('Two-site min Choi eigenvalue heatmap')\n",
    "plt.tight_layout()\n",
    "plt.savefig(os.path.join(OUTDIR,'two_site_choi_heatmap.png'))\n",
    "plt.show() \n",
    "print(\"Saved Choi heatmap.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "be9db79b-c27d-4cf4-bdd4-d798cd224be1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved radical-pair CSV: ./harsha_results\\radical_pair_scan.csv\n"
     ]
    }
   ],
   "source": [
    "# CELL: Radical-pair parameter sweep\n",
    "tlist = np.linspace(0,1.0,120)\n",
    "rad = build_radical_pair_minimal()\n",
    "d = rad['d']; H0 = rad['H0']; P_S = rad['P_S']\n",
    "\n",
    "kappas_r = [0.0, 0.1, 0.3]\n",
    "gammas_r = [0.01, 0.03, 0.07]\n",
    "\n",
    "rows = []\n",
    "for kappa in kappas_r:\n",
    "    for gamma in gammas_r:\n",
    "        # pick a simple dissipator as proxy (single-spin lowering on first electron)\n",
    "        c_ops = [np.sqrt(gamma) * qt.tensor(qt.sigmam(), qt.qeye(2))]\n",
    "        Phi = evolve_basis_self_consistent(H0, P_S, c_ops, tlist, lambda0=0.0, kappa=kappa)\n",
    "        min_eig, eigs = min_choi_eigenvalue(Phi, d)\n",
    "        coh_proxy = coherent_information_proxy(Phi, d, samples=64)\n",
    "        rows.append({'system':'radical-pair','kappa':kappa,'gamma':gamma,'min_choi_eig':float(min_eig),'coh_proxy':float(coh_proxy)})\n",
    "df_rad = pd.DataFrame(rows)\n",
    "rad_csv = os.path.join(OUTDIR,'radical_pair_scan.csv')\n",
    "df_rad.to_csv(rad_csv, index=False)\n",
    "print(\"Saved radical-pair CSV:\", rad_csv)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5f2bfdb0-4fa8-47c8-8a2b-f61f78ade703",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enzyme example saved; min Choi eig: -0.975308646815955 Lindblad gap: 0.0004477229589437473\n"
     ]
    }
   ],
   "source": [
    "# CELL 4: Enzyme tunneling example and Lindbladian spectral gap\n",
    "tlist = np.linspace(0,1.0,120)\n",
    "en = build_enzyme_tunneling()\n",
    "d = en['d']; H0 = en['H0']; proj_acceptor = en['proj_acceptor']\n",
    "\n",
    "k_sink = 0.2\n",
    "J_sink = np.sqrt(k_sink) * qt.basis(d,2)*qt.basis(d,1).dag()  # product <- acceptor\n",
    "gamma = 0.05\n",
    "c_ops = [np.sqrt(gamma) * (qt.basis(d,0)*qt.basis(d,0).dag()), J_sink]\n",
    "\n",
    "kappa = 0.2\n",
    "Phi = evolve_basis_self_consistent(H0, proj_acceptor, c_ops, tlist, lambda0=0.0, kappa=kappa)\n",
    "min_eig, eigs = min_choi_eigenvalue(Phi, d)\n",
    "gap, eigsL = spectral_gap_of_lindbladian(H0, c_ops)\n",
    "\n",
    "with open(os.path.join(OUTDIR,'enzyme_example.json'),'w') as f:\n",
    "    json.dump({'min_choi_eig':float(min_eig),'lindblad_gap':float(gap)}, f)\n",
    "print(\"Enzyme example saved; min Choi eig:\", float(min_eig), \"Lindblad gap:\", float(gap))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2b85c9d4-8c66-48b6-b4b9-00ae696a4224",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running parameter-fit demo (synthetic)...\n",
      "Fit result:   message: CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL\n",
      "  success: True\n",
      "   status: 0\n",
      "      fun: 7.973911202677802e-10\n",
      "        x: [ 1.000e-01]\n",
      "      nit: 0\n",
      "      jac: [ 1.923e-10]\n",
      "     nfev: 2\n",
      "     njev: 1\n",
      " hess_inv: <1x1 LbfgsInvHessProduct with dtype=float64>\n",
      "Saved fit_demo.json\n"
     ]
    }
   ],
   "source": [
    "# CELL: Parameter-fit demo (uses synthetic data from a run with known kappa)\n",
    "print(\"Running parameter-fit demo (synthetic)...\")\n",
    "tlist = np.linspace(0,1.0,120)\n",
    "two = build_two_site()\n",
    "H0 = two['H0']; proj1 = two['proj1']\n",
    "true_kappa = 0.3\n",
    "gamma = 0.05\n",
    "c_ops = [np.sqrt(gamma) * qt.sigmam()]\n",
    "\n",
    "# generate synthetic measured acceptor (here we reuse proj1 as observable)\n",
    "rho = qt.Qobj(proj1)\n",
    "measured = []\n",
    "for idx in range(len(tlist)-1):\n",
    "    dt = tlist[idx+1]-tlist[idx]\n",
    "    pop = np.real((rho * proj1).tr())\n",
    "    lam = 0.0 + true_kappa * pop\n",
    "    Ht = H0 + lam * proj1\n",
    "    res = qt.mesolve(Ht, rho, [0, dt], c_ops, e_ops=[])\n",
    "    rho = res.states[-1]\n",
    "    measured.append(np.real((rho * proj1).tr()))\n",
    "\n",
    "res_fit = fit_kappa_from_observables(H0, proj1, c_ops, tlist, proj1, measured, kappa_init=0.1)\n",
    "print(\"Fit result:\", res_fit)\n",
    "with open(os.path.join(OUTDIR,'fit_demo.json'),'w') as f:\n",
    "    json.dump({'fit_result_x': res_fit.x.tolist(), 'fun': float(res_fit.fun)}, f)\n",
    "print(\"Saved fit_demo.json\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0d5dedd3-460a-4a64-9722-c9b804603f92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output files in ./harsha_results :\n",
      " - .ipynb_checkpoints\n",
      " - enzyme_example.json\n",
      " - fit_demo.json\n",
      " - radical_pair_scan.csv\n",
      " - two_site_choi_heatmap.png\n",
      " - two_site_entropy_example.png\n",
      " - two_site_scan.csv\n",
      " - vibronic_run.csv\n",
      " - vibronic_run_summary.png\n",
      "\n",
      "Open the PNGs/CSVs to inspect results. If any cell throws an error or bug or missleads. Kindly raise an issue at https://github.com/harsha-axqte/harsha-equation-notebook\n",
      "\n",
      "\n",
      "Thanks for your support!\n"
     ]
    }
   ],
   "source": [
    "# CELL: Summary of outputs (print paths)\n",
    "files = os.listdir(OUTDIR)\n",
    "print(\"Output files in\", OUTDIR, \":\")\n",
    "for fn in sorted(files):\n",
    "    print(\" -\", fn)\n",
    "print(\"\\nOpen the PNGs/CSVs to inspect results. If any cell throws an error or bug or missleads. Kindly raise an issue at https://github.com/harsha-axqte/harsha-equation-notebook\")\n",
    "print(\"\")\n",
    "print(\"\\nThanks for your support!\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
